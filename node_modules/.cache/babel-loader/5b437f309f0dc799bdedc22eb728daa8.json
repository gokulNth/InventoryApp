{"ast":null,"code":"import _objectSpread from \"D:\\\\firebase-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport firebase from 'firebase';\nvar firebaseConfig = {\n  apiKey: 'AIzaSyAMXvz4AD4bx1NvJchOugf1uYvPhf8xBiA',\n  authDomain: 'test-1528871171306.firebaseapp.com',\n  databaseURL: 'https://test-1528871171306.firebaseio.com',\n  projectId: 'test-1528871171306',\n  storageBucket: 'test-1528871171306.appspot.com',\n  messagingSenderId: '791882157170',\n  appId: '1:791882157170:web:093a1485e8da828a'\n}; // Initialize Firebase\n\nfirebase.initializeApp(firebaseConfig);\nvar firestore = firebase.firestore();\nconst docRef = firestore.collection('Products');\n\nconst fetch = async () => {\n  await console.log('in fetch');\n  return await docRef.get().then(async querySnapshot => {\n    return await querySnapshot;\n  }).catch(err => {\n    console.error('Error Occured', err);\n    return err;\n  });\n};\n\nconst addnew = async (state, push) => {\n  let a = 0;\n  await docRef.get().then(async querySnapshot => {\n    await querySnapshot.forEach(async doc => {\n      a = await +doc.id;\n    });\n  });\n  await ++a;\n  let data = {\n    Avail: state.Avail,\n    DetailAvail: {\n      [new Date().toDateString().slice(4)]: state.Avail\n    },\n    Name: state.Name,\n    Price: state.Price\n  };\n  await docRef.doc(a.toString()).set(data);\n  await push('/');\n};\n\nconst remove = async (state, date) => {\n  let b = await docRef.doc(state.id).get().then(async querySnapshot => {\n    return await querySnapshot.data();\n  });\n  let q = await Object.assign({}, b, _objectSpread({}, b, {\n    Avail: b.Avail - b.DetailAvail[date]\n  }));\n  await docRef.doc(state.id).update('Avail', b.Avail - b.DetailAvail[date]);\n  let a = await Object.assign({}, q.DetailAvail, delete q.DetailAvail[date]);\n  await docRef.doc(state.id).update('DetailAvail', a);\n  return await Object.assign({}, state, {\n    Price: await docRef.doc(state.id).get().then(async querySnapshot => {\n      return await querySnapshot.data().Price;\n    }),\n    num: 0,\n    DetailAvail: await docRef.doc(state.id).get().then(async querySnapshot => {\n      return await querySnapshot.data().DetailAvail;\n    }),\n    Avail: await docRef.doc(state.id).get().then(async querySnapshot => {\n      return await querySnapshot.data().Avail;\n    })\n  });\n};\n\nconst fetchDetailAvail = async state => {\n  return await docRef.doc(state.id).get().then(async querySnapshot => {\n    return await querySnapshot.data();\n  });\n};\n\nconst add = async state => {\n  let a = await docRef.doc(state.id).get().then(async querySnapshot => {\n    return await querySnapshot.data().Avail;\n  });\n  let data = {\n    [state.date]: state.num\n  };\n  let b = await docRef.doc(state.id).get().then(async querySnapshot => {\n    return await querySnapshot.data().DetailAvail;\n  });\n  let c = await _objectSpread({}, b, data);\n  await docRef.doc(state.id).update('DetailAvail', c);\n  await docRef.doc(state.id).update('Avail', a + +state.num).then(() => alert('added'));\n  return await Object.assign({}, state, {\n    Price: await docRef.doc(state.id).get().then(async querySnapshot => {\n      return await querySnapshot.data().Price;\n    }),\n    num: 0,\n    DetailAvail: await docRef.doc(state.id).get().then(async querySnapshot => {\n      return await querySnapshot.data().DetailAvail;\n    }),\n    Avail: await docRef.doc(state.id).get().then(async querySnapshot => {\n      return await querySnapshot.data().Avail;\n    })\n  });\n};\n\nconst update = async state => {\n  state.all.map(async i => {\n    return await docRef.doc(state.item[i].id).update('Avail', state.item[i].totavail - state.item[i].req);\n  });\n};\n\nexport { fetch, update, add, fetchDetailAvail, addnew, remove };","map":{"version":3,"sources":["D:\\firebase-app\\src\\Fetches.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","initializeApp","firestore","docRef","collection","fetch","console","log","get","then","querySnapshot","catch","err","error","addnew","state","push","a","forEach","doc","id","data","Avail","DetailAvail","Date","toDateString","slice","Name","Price","toString","set","remove","date","b","q","Object","assign","update","num","fetchDetailAvail","add","c","alert","all","map","i","item","totavail","req"],"mappings":"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","sourcesContent":["import firebase from 'firebase';\r\n\r\nvar firebaseConfig = {\r\n  apiKey: 'AIzaSyAMXvz4AD4bx1NvJchOugf1uYvPhf8xBiA',\r\n  authDomain: 'test-1528871171306.firebaseapp.com',\r\n  databaseURL: 'https://test-1528871171306.firebaseio.com',\r\n  projectId: 'test-1528871171306',\r\n  storageBucket: 'test-1528871171306.appspot.com',\r\n  messagingSenderId: '791882157170',\r\n  appId: '1:791882157170:web:093a1485e8da828a'\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\nvar firestore = firebase.firestore();\r\nconst docRef = firestore.collection('Products');\r\n\r\nconst fetch = async () => {\r\n  await console.log('in fetch');\r\n  return await docRef\r\n    .get()\r\n    .then(async querySnapshot => {\r\n      return await querySnapshot;\r\n    })\r\n    .catch(err => {\r\n      console.error('Error Occured', err);\r\n      return err;\r\n    });\r\n};\r\n\r\nconst addnew = async (state, push) => {\r\n  let a = 0;\r\n  await docRef.get().then(async querySnapshot => {\r\n    await querySnapshot.forEach(async doc => {\r\n      a = await +doc.id;\r\n    });\r\n  });\r\n  await ++a;\r\n  let data = {\r\n    Avail: state.Avail,\r\n    DetailAvail: { [new Date().toDateString().slice(4)]: state.Avail },\r\n    Name: state.Name,\r\n    Price: state.Price\r\n  };\r\n  await docRef.doc(a.toString()).set(data);\r\n  await push('/');\r\n};\r\nconst remove = async (state, date) => {\r\n  let b = await docRef\r\n    .doc(state.id)\r\n    .get()\r\n    .then(async querySnapshot => {\r\n      return await querySnapshot.data();\r\n    });\r\n  let q = await Object.assign({}, b, {\r\n    ...b,\r\n    Avail: b.Avail - b.DetailAvail[date]\r\n  });\r\n  await docRef.doc(state.id).update('Avail', b.Avail - b.DetailAvail[date]);\r\n  let a = await Object.assign({}, q.DetailAvail, delete q.DetailAvail[date]);\r\n  await docRef.doc(state.id).update('DetailAvail', a);\r\n  return await Object.assign({}, state, {\r\n    Price: await docRef\r\n      .doc(state.id)\r\n      .get()\r\n      .then(async querySnapshot => {\r\n        return await querySnapshot.data().Price;\r\n      }),\r\n    num: 0,\r\n    DetailAvail: await docRef\r\n      .doc(state.id)\r\n      .get()\r\n      .then(async querySnapshot => {\r\n        return await querySnapshot.data().DetailAvail;\r\n      }),\r\n    Avail: await docRef\r\n      .doc(state.id)\r\n      .get()\r\n      .then(async querySnapshot => {\r\n        return await querySnapshot.data().Avail;\r\n      })\r\n  });\r\n};\r\nconst fetchDetailAvail = async state => {\r\n  return await docRef\r\n    .doc(state.id)\r\n    .get()\r\n    .then(async querySnapshot => {\r\n      return await querySnapshot.data();\r\n    });\r\n};\r\n\r\nconst add = async state => {\r\n  let a = await docRef\r\n    .doc(state.id)\r\n    .get()\r\n    .then(async querySnapshot => {\r\n      return await querySnapshot.data().Avail;\r\n    });\r\n  let data = { [state.date]: state.num };\r\n  let b = await docRef\r\n    .doc(state.id)\r\n    .get()\r\n    .then(async querySnapshot => {\r\n      return await querySnapshot.data().DetailAvail;\r\n    });\r\n  let c = await { ...b, ...data };\r\n  await docRef.doc(state.id).update('DetailAvail', c);\r\n  await docRef\r\n    .doc(state.id)\r\n    .update('Avail', a + +state.num)\r\n    .then(() => alert('added'));\r\n  return await Object.assign({}, state, {\r\n    Price: await docRef\r\n      .doc(state.id)\r\n      .get()\r\n      .then(async querySnapshot => {\r\n        return await querySnapshot.data().Price;\r\n      }),\r\n    num: 0,\r\n    DetailAvail: await docRef\r\n      .doc(state.id)\r\n      .get()\r\n      .then(async querySnapshot => {\r\n        return await querySnapshot.data().DetailAvail;\r\n      }),\r\n    Avail: await docRef\r\n      .doc(state.id)\r\n      .get()\r\n      .then(async querySnapshot => {\r\n        return await querySnapshot.data().Avail;\r\n      })\r\n  });\r\n};\r\n\r\nconst update = async state => {\r\n  state.all.map(async i => {\r\n    return await docRef\r\n      .doc(state.item[i].id)\r\n      .update('Avail', state.item[i].totavail - state.item[i].req);\r\n  });\r\n};\r\n\r\nexport { fetch, update, add, fetchDetailAvail, addnew, remove };\r\n"]},"metadata":{},"sourceType":"module"}